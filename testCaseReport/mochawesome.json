{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-02T08:15:03.686Z",
    "end": "2023-11-02T08:15:03.695Z",
    "duration": 9,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "58ba297c-ca78-4878-9b60-09b3164d8bee",
      "title": "",
      "fullFile": "/Users/apple/Downloads/coding/robot/dist/src/test_case/robot.spec.js",
      "file": "/dist/src/test_case/robot.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "369a2571-49df-4e64-b934-77580ff3a90d",
          "title": "Robot",
          "fullFile": "/Users/apple/Downloads/coding/robot/dist/src/test_case/robot.spec.js",
          "file": "/dist/src/test_case/robot.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should execute basic commands correctly",
              "fullTitle": "Robot should execute basic commands correctly",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const widthSpace = 100;\nconst heightSpace = 100;\nconst testCases = [\n    { position: 'N 0 0', commands: 'M1RM4L3M2', expected: 'S 4 99' },\n    { position: 'S 0 0', commands: 'M1RM4L3M3', expected: 'N 96 2' },\n    { position: 'E 0 0', commands: 'M1RM4LR13M3', expected: 'S 1 93' },\n    { position: 'W 10 12', commands: 'M1RM4LR13M3', expected: 'N 9 19' },\n];\ntestCases.forEach((testCase) => {\n    const robot = new robot_1.Robot(widthSpace, heightSpace);\n    const result = robot.executeCommands(testCase.position, testCase.commands);\n    console.log('basic commands correctly', result);\n    expect(result).to.equal(testCase.expected);\n});",
              "err": {},
              "uuid": "a0275634-6a2e-4634-8079-5e42d02be412",
              "parentUUID": "369a2571-49df-4e64-b934-77580ff3a90d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle boundary conditions correctly",
              "fullTitle": "Robot should handle boundary conditions correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const widthSpace = 5;\nconst heightSpace = 5;\nconst testCases = [\n    { position: 'N 0 0', commands: 'M6', expected: 'N 0 1' },\n    { position: 'E 4 4', commands: 'M6', expected: 'E 0 4' },\n    { position: 'S 4 4', commands: 'M6', expected: 'S 4 3' },\n];\ntestCases.forEach((testCase) => {\n    const robot = new robot_1.Robot(widthSpace, heightSpace);\n    const result = robot.executeCommands(testCase.position, testCase.commands);\n    console.log('boundary conditions correctly', result);\n    expect(result).to.equal(testCase.expected);\n});",
              "err": {},
              "uuid": "297ad2d9-3a36-4db4-95a4-8e81105fb670",
              "parentUUID": "369a2571-49df-4e64-b934-77580ff3a90d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0275634-6a2e-4634-8079-5e42d02be412",
            "297ad2d9-3a36-4db4-95a4-8e81105fb670"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "testCaseReport"
      },
      "version": "6.2.0"
    }
  }
}